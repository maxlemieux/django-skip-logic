# Generated by Django 2.1.dev20171002151526 on 2017-10-02 16:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AvatarItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_text', models.CharField(max_length=200)),
                ('item_image', models.ImageField(blank=True, upload_to='')),
                ('item_image_css_id', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='AvatarStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stored_avataritem_quantity', models.PositiveIntegerField(default=1)),
                ('stored_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatarstorage_avataritem', to='skip_logic.AvatarItem')),
            ],
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date created')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=50)),
                ('choice_text', models.CharField(blank=True, max_length=200, null=True)),
                ('choice_number', models.IntegerField(default=1)),
                ('votes', models.IntegerField(default=0)),
                ('choice_image', models.ImageField(blank=True, null=True, upload_to='choice_images/')),
                ('input_field', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': ' Choices',
                'ordering': ['choice_number', 'question'],
                'verbose_name': ' Choice',
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('page_text', models.CharField(blank=True, max_length=2000, null=True)),
                ('page_number', models.IntegerField(default=1)),
                ('is_last', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': '   Pages',
                'ordering': ['page_number'],
                'verbose_name': '   Page',
            },
        ),
        migrations.CreateModel(
            name='Path',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=50)),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='path_choice', to='skip_logic.Choice')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='path_page', to='skip_logic.Page')),
            ],
            options={
                'verbose_name_plural': 'Paths',
                'verbose_name': 'Path',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=50)),
                ('question_text', models.CharField(blank=True, max_length=200)),
                ('question_number', models.IntegerField()),
                ('layout_horizontal', models.BooleanField(default=False)),
                ('required', models.BooleanField(default=False)),
                ('page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_page', to='skip_logic.Page')),
            ],
            options={
                'verbose_name_plural': '  Questions',
                'ordering': ['question_number'],
                'verbose_name': '  Question',
            },
        ),
        migrations.CreateModel(
            name='QuestionResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session', models.CharField(max_length=40)),
                ('username', models.CharField(blank=True, max_length=50, null=True)),
                ('user_ip_address', models.CharField(blank=True, max_length=50, null=True)),
                ('result', models.CharField(blank=True, max_length=1024, null=True)),
                ('input_text', models.CharField(blank=True, max_length=1024, null=True)),
                ('result_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date surveyed')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questionresult_question', to='skip_logic.Question')),
                ('result_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questionresult_choice', to='skip_logic.Choice')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questionresult_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '     QuestionResults',
                'verbose_name': '     QuestionResult',
            },
        ),
        migrations.CreateModel(
            name='ReferralCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=32)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date created')),
                ('last_used_date', models.DateTimeField(blank=True, null=True, verbose_name='date last used')),
                ('last_ip', models.CharField(blank=True, max_length=46, null=True, verbose_name='last ip address used')),
                ('geoip_city', models.CharField(blank=True, max_length=50, null=True)),
                ('geoip_state', models.CharField(blank=True, max_length=50, null=True)),
                ('geoip_postal_code', models.CharField(blank=True, max_length=50, null=True)),
                ('geoip_country', models.CharField(blank=True, max_length=50, null=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referralcode_campaign', to='skip_logic.Campaign')),
            ],
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=1000)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('in_store', models.BooleanField(default=False)),
                ('point_cost', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='RewardLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('pub_date', models.DateTimeField(blank=True, null=True, verbose_name='date published')),
                ('is_public', models.BooleanField(default=False)),
                ('description', models.CharField(max_length=500)),
                ('call_to_action_label', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('call_to_action_url', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('call_to_action_text', models.CharField(blank=True, default='', max_length=5000, null=True)),
                ('survey_length', models.IntegerField(blank=True, default=1, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='survey_author', to=settings.AUTH_USER_MODEL)),
                ('campaign', models.ManyToManyField(blank=True, to='skip_logic.Campaign')),
            ],
            options={
                'verbose_name_plural': '    Surveys',
                'verbose_name': '    Survey',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_display_name', models.CharField(blank=True, max_length=30)),
                ('user_avatar', models.ImageField(blank=True, upload_to='')),
                ('user_profile_private', models.BooleanField(default=False)),
                ('user_email', models.CharField(blank=True, max_length=200)),
                ('user_zipcode', models.CharField(blank=True, max_length=20)),
                ('user_email_opt_in', models.BooleanField(default=True, verbose_name='Yes, please send me occasional special offers from our partners.')),
                ('user_currency', models.PositiveIntegerField(blank=True, default=0)),
                ('user_experience', models.PositiveIntegerField(blank=True, default=0)),
                ('user_registration_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date registered')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='reward',
            name='reward_level',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='skip_logic.RewardLevel'),
        ),
        migrations.AddField(
            model_name='referralcode',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referralcode_survey', to='skip_logic.Survey'),
        ),
        migrations.AddField(
            model_name='page',
            name='survey',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='page_survey', to='skip_logic.Survey'),
        ),
        migrations.AddField(
            model_name='choice',
            name='question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='choice_question', to='skip_logic.Question'),
        ),
        migrations.AddField(
            model_name='avatarstorage',
            name='userprofile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatarstorage_userprofile', to='skip_logic.UserProfile'),
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together={('question_number', 'page')},
        ),
        migrations.AlterUniqueTogether(
            name='page',
            unique_together={('page_number', 'survey')},
        ),
    ]
